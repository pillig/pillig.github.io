{"version":3,"sources":["ContactText.js","App.js","Navbar.js","serviceWorker.js","index.js"],"names":["ContactText","react_default","a","createElement","className","Component","Accounts","ContactInfo","ContactText_ContactText","ContactText_Accounts","App","src_ContactText","SiteNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","isOpen","setState","reactstrap_es","color","light","expand","href","onClick","navbar","nav","inNavbar","caret","right","header","Boolean","window","location","hostname","match","ReactDOM","render","Navbar_SiteNavbar","document","getElementById","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.901ace69.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\nclass ContactText extends Component {\n  render() {\n    return (\n      <div className=\"contactText\">\n        <p>\n          You can contact me at .\n        </p>\n      </div>\n    )\n  }\n}\n\nclass Accounts extends Component {\n  render() {\n    return (\n      <div className=\"accounts\">\n        Accounts here\n      </div>\n    )\n  }\n}\n\nclass ContactInfo extends Component {\n  render() {\n    return (\n      <div>\n        <ContactText></ContactText>\n        <Accounts></Accounts>\n      </div>\n    )\n  }\n}\n\nexport default ContactInfo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ContactText from './ContactText'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ContactText />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './Navbar.css';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\n\nexport default class SiteNavbar extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.toggle = this.toggle.bind(this);\n      this.state = {\n        isOpen: false\n      };\n    }\n    toggle() {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n    render() {\n      return (\n        <div>\n          <Navbar color=\"dark\" light expand=\"md\">\n            <NavbarBrand href=\"/\">Parker Illig</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink href=\"/about\">About</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink href=\"/contact\">Contact</NavLink>\n                </NavItem>\n                <UncontrolledDropdown nav inNavbar>\n                  <DropdownToggle nav caret>\n                    Projects\n                  </DropdownToggle>\n                  <DropdownMenu right>\n                  <DropdownItem header>CSCI 3308 - Software Development & Tools</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/CSCI3308Project'>Your Yelp</DropdownItem>\n                    <DropdownItem header>CSCI 4830 - Big Data HCI</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/book'>Book 1</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/book2'>Book 2</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/book3'>Book 3</DropdownItem>\n                    <DropdownItem header>CSCI 4502 - Data Mining</DropdownItem>\n                    <DropdownItem href='https://github.com/taylorjandrews/GitCu'>GitCU</DropdownItem>\n                    <DropdownItem header>Personal</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/back-bot'>Back-bot</DropdownItem> \n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </Nav>\n            </Collapse>\n          </Navbar>\n        </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport SiteNavbar from './Navbar';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<SiteNavbar/>, document.getElementById('navbar'));\nReactDOM.render(<App />, document.getElementById('info'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}