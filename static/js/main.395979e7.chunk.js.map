{"version":3,"sources":["ContactText.js","App.js","Navbar.js","serviceWorker.js","index.js"],"names":["ContactText","undefined","this","props","email","react_default","a","createElement","className","reactstrap_es","obfuscate_default","Component","Accounts","io","ContactInfo","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","firebase","initializeApp","apiKey","authDomain","projectId","db","firestore","settings","timestampsInSnapshots","collection","doc","get","then","exists","console","log","data","get_email","d","setState","ContactText_ContactText","ContactText_Accounts","App","src_ContactText","SiteNavbar","toggle","bind","assertThisInitialized","isOpen","color","light","expand","href","onClick","navbar","nav","inNavbar","caret","right","header","Boolean","window","location","hostname","match","ReactDOM","render","Navbar_SiteNavbar","document","getElementById","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.395979e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { IoLogoSteam, IoLogoLinkedin } from \"react-icons/io\";\nimport { Fade } from 'reactstrap';\nimport Mailto from 'react-protected-mailto';\nimport firebase from 'firebase';\n\nfunction get_email () {\n  firebase.initializeApp({\n    apiKey: 'AIzaSyC2Rd5TUOga6pTsoi6-KTKT-Fj5UcQh9Ro',\n    authDomain: 'pillig-personal-site.firebaseapp.com',\n    projectId: 'pillig-personal-site'\n  });\n  \n  // Initialize Cloud Firestore through Firebase\n  var db = firebase.firestore();\n  \n  // Disable deprecated features\n  db.settings({\n    timestampsInSnapshots: true\n  });\n  \n  return db.collection(\"email\").doc(\"gmail\").get().then( function (doc) {\n    if (doc.exists) { \n      console.log('found ', doc.data()['address'])\n      return doc.data()['address']\n    }\n    else {\n      return \"ERROR\"\n    }\n  })\n}\n\nclass ContactText extends Component {\n  render() {\n    if (this.props.email === undefined) {\n      return (\n        <div className=\"contactText\">\n          <p>\n          </p>\n        </div>\n      )\n    }\n    else {\n      return (\n        <div className=\"contactText\">\n          <Fade>\n            <p>\n              You can contact me at <Mailto email={this.props.email} />.\n            </p>\n          </Fade>\n        </div>\n      )\n    }\n\n  }\n}\n\nclass Accounts extends Component {\n  render() {\n    return (\n      <div className=\"accounts\">\n        <h1>\n          <IoLogoSteam />\n          <IoLogoLinkedin />\n        </h1>\n      </div>\n    )\n  }\n}\n\nclass ContactInfo extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      email: undefined\n    }\n    get_email().then( (d) => { console.log('setting ', d); this.setState({ email: d }) });\n  }\n  render() {\n    console.log('render con', this.state.email)\n    return (\n      <div>\n        <ContactText email={this.state.email}></ContactText>\n        <Accounts></Accounts>\n      </div>\n    )\n  }\n}\n\nexport default ContactInfo;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ContactText from './ContactText'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ContactText />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react';\nimport './Navbar.css';\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem } from 'reactstrap';\n\nexport default class SiteNavbar extends Component {\n    constructor(props) {\n      super(props);\n  \n      this.toggle = this.toggle.bind(this);\n      this.state = {\n        isOpen: false\n      };\n    }\n    toggle() {\n      this.setState({\n        isOpen: !this.state.isOpen\n      });\n    }\n    render() {\n      return (\n        <div>\n          <Navbar color=\"dark\" light expand=\"md\">\n            <NavbarBrand href=\"/\">Parker Illig</NavbarBrand>\n            <NavbarToggler onClick={this.toggle} />\n            <Collapse isOpen={this.state.isOpen} navbar>\n              <Nav className=\"ml-auto\" navbar>\n                <NavItem>\n                  <NavLink href=\"/about\">About</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink href=\"/contact\">Contact</NavLink>\n                </NavItem>\n                <UncontrolledDropdown nav inNavbar>\n                  <DropdownToggle nav caret>\n                    Projects\n                  </DropdownToggle>\n                  <DropdownMenu right>\n                  <DropdownItem header>CSCI 3308 - Software Development & Tools</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/CSCI3308Project'>Your Yelp</DropdownItem>\n                    <DropdownItem header>CSCI 4830 - Big Data HCI</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/book'>Book 1</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/book2'>Book 2</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/book3'>Book 3</DropdownItem>\n                    <DropdownItem header>CSCI 4502 - Data Mining</DropdownItem>\n                    <DropdownItem href='https://github.com/taylorjandrews/GitCu'>GitCU</DropdownItem>\n                    <DropdownItem header>Personal</DropdownItem>\n                    <DropdownItem href='https://github.com/pillig/back-bot'>Back-bot</DropdownItem> \n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </Nav>\n            </Collapse>\n          </Navbar>\n        </div>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport SiteNavbar from './Navbar';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(<SiteNavbar/>, document.getElementById('navbar'));\nReactDOM.render(<App />, document.getElementById('info'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}